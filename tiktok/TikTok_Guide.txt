
====================================================================================================================================================================================
====================================================================================================================================================================================

<실행방법>

0. comment 결과를 저장할 폴더 생성(root path) 

1. tiktok\\input.xlsx 파일에 수집할 비디오 URL 목록 작성 ※URL예시: https://www.tiktok.com/@kkubi99/video/7148811193187306754?is_copy_url=1&is_from_webapp=v1&item_id=7148811193187306754

2. tiktok\\main.py script 실행

3. 기능 설정

4. 루트 경로 설정

5. 댓글수집 진행

※ 왠만해서는 MAC으로 진행

<Input>

- tiktok\\input.xlsx


<Output>

- result_c.csv : 댓글만

- result_r.csv : 답글만

- user_list.csv : 댓글,답글 작성자들의 계정 url

- user_list_info.csv : 댓글,답글 작성자 상세정보

- user_list_exception.csv : 수집되지 않는 계정 리스트

- result.csv : 댓글,답글 통합 파일

- result_t.csv : 댓글,답글 번역 추가 파일

- result_i.csv : 댓글,답글 작성자 상세정보 추가 파일

- final.csv : 열 정보 및 순서까지 적용한 최종파일

- words_list.csv : 상위 100개의 단어 빈도수 리스트

- wordcloud.png : 상위 100개 단어의 워드 클라우드


<주의사항>

※ 댓글 개수의 차이는 틱톡의 댓글제어 기능 때문

※ 용량문제, 프로세스 과다 사용 문제로 인해 여러영상의 경우 나눠서 진행할것 (★두개,세개가 적당 ==> 너무 많으면 API도 제대로 수신하기 힘듬)

====================================================================================================================================================================================
====================================================================================================================================================================================

<기능 설명>


F0. All_In_One = 0
	
	- Input : input.xlsx

	- Output : result.csv, result_c.csv, result_r.csv, user_list.csv

	- Feat : comment & reply api 수집과 파싱, 통합파일까지 생성, user list 생성 (※ F1 ~ F4 까지 한번에 진행)

F1. API_Scraping = 1

	- Input : input.xlsx

	- Output : comment_n.dict, reply_n.dict

	- Feat : comment & reply api 수집, 딕셔너리형태로 저장

F2. Comment_Parsing = 2

	- Input : comment_n.dict

	- Output : result_c.csv

	- Feat : api(딕셔너리)에서 필요 정보만 추출하여 csv로 저장

	※ ['user']['sec_uid'] error 발생시 해당 영상 다시 수집해야함

F3. Reply_Parsing = 3

	- Input : reply_n.dict

	- Output : result_r.csv

	- Feat : api(딕셔너리)에서 필요 정보만 추출하여 csv로 저장

	※ ['user']['sec_uid'] error 발생시 해당 영상 다시 수집해야함

F4. Comment_Reply_Integration = 4

	- Input : result_c.csv, result_r.csv

	- Output : result.csv, user_list.csv

	- Feat : result_c.csv, result_r.csv 로부터 result.csv를 생성하고, 댓글/답글을 단 유저들의 url 리스트를 추출

		 (※ result.csv에는 번역과 유저세부정보를 제외한 모든 정보가 포함됨)

====================================================================================================================================================================================

F5. Translate = 5

	- Input : result.csv

	- Output : result_t.csv

	- Feat : 구글번역 API를 통한 번역 (※ 개별 요청은 5000글자미만, 시간당 1000개의 요청만 가능)

	(★ 번역이 안된 것은 직접 구글 번역으로 채워넣어야함)

	(★ 소스코드 실행 중 chunk['language'].values[0] 를 감지할 수 없는 경우가 있음. 다시 실행하고 완전히 끝난뒤 직접 체크해야함)

F6. User_Info = 6

	- Input : user_list.csv

	- Output : user_list_info.csv, user_list_exception.csv

	- Feat : 계정 정보를 가지고 올 수 없는 계정은 user_list_exception.csv에 저장, 단일 영상분석의 경우 user_list를 분할하여 진행 

	(★ 하나의 영상씩 진행하는것이 빠르다.)

	(★ user_list_exception.csv 확인 후 가져올 수 있는 계정정보는 직접 채워넣어야함(알 수 없는 이유로 수집이 안되는 경우가 존재))

	(★ user_list_exception.csv에 포함안된것들도 있다. result_i.csv에서 Ctrl+F 하여 빈공간 찾은 후 직접 서칭해서 매꿀것) 


	☆☆☆  너무 많은 경우 captha로 넘어가거나, 완전히 ip차단 먹는 경우가 있음

		이런경우 window, mac 둘다 사용하고, 그래도 안되면 proxy사용해야함


F7. User_Info_Integration = 7

	- Input : user_list_info.csv

	- Output : result_i.csv

	- Feat : input 파일로 result.csv / result_t.csv 선택, result.csv파일과 user_list_info.csv를 통합, 유저정보가 없는 유저는 비공개 계정

====================================================================================================================================================================================

F8. Column_Fix = 8

	- Input : 열개수, 열순서, 소스파일

	- Output : final.csv

	- Feat : 최종파일

====================================================================================================================================================================================

F9. Wourd_Cloud = 9
	
	- Input : result.csv or result_t.csv

	- Output : words_list.csv, wordcloud.png

	- Feat : result_t.csv가 없을 시 result.csv로부터 영어와 한글만 텍스트만 진행

		 result_t.csv가 있다면 영어와 한글, 타외국어는 번역된 텍스트로 한글로 진행


F10. CSV_to_Excel = 10

	- Input : 변환하고자 하는 파일의 full path를 입력

	- output: 저장하고자 하는 파일의 full path를 입력

	- Feat : 어떤 파일이건 변환

====================================================================================================================================================================================

+ Proxy 서치

System.py 안에 main 함수 실행

- main함수 주석에 포함된 링크들에서 직접찾아야함

- 최신 기준, https, 80 or 8080 으로 서치


====================================================================================================================================================================================



